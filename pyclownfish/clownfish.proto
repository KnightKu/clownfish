syntax = "proto2";
package clownfish;
message ClownfishMessage {
    enum ClownfishProtocolVersion {
        CPV_ZERO = 0;
    }

    enum ClownfishMessageType {
        CMT_GENERAL = 0;
        CMT_PING_REQUEST = 1;
        CMT_PING_REPLY = 2;
        CMT_CONNECT_REQUEST = 3;
        CMT_CONNECT_REPLY = 4;
        /* The request to complete an interactive input line */
        CMT_INTERACT_REQUEST = 5;
        CMT_INTERACT_REPLY = 6;
        CMT_COMMAND_REQUEST = 7;
        CMT_COMMAND_PARTWAY_QUERY = 8;
        CMT_COMMAND_REPLY = 9;
        CMT_COMMAND_INPT_REPLY = 10;
    }

    enum ClownfishErrno {
        CE_NO_ERROR = 0;
        /* UUID doesnot exist on server */
        CE_NO_UUID = 1;
        /* Request type is not supported */
        CE_NO_TYPE = 2;
    }

    message ClownfishConnectRequest {
        required int64 ccrt_client_hash = 1;
    }

    message ClownfishConnectReply {
        required int64 ccry_client_hash = 1;
    }

    message ClownfishPingRequest {
    }

    message ClownfishPingReply {
    }

    message ClownfishInteractRequest {
        required string cirt_line = 1;
        required int32 cirt_begidx = 2;
        required int32 cirt_endidx = 3;
    }

    message ClownfishInteractReply {
        repeated string ciry_candidates = 1;
    }

    message ClownfishCommandRequest {
        required string ccrt_cmd_line = 1;
    }

    message ClownfishCommandPartwayQuery {
        required bool ccpq_abort = 1;
    }

    message ClownfishCommandFinalReply {
        required int32 ccfr_exit_status = 1;
        required int32 ccfr_quit = 2;
    }

    message ClownfishLogRecord {
        /* Name of the log */
        required bool clr_is_stdout = 1;
        required bool clr_is_stderr = 2;
        required string clr_name = 3;
        /* level of the log: ERROR/WARNING/INFO/DEBUG */
        required int32 clr_levelno = 4;
        required string clr_pathname = 5;
        required int32 clr_lineno = 6;
        required string clr_funcname = 7;
        required int64 clr_created_second = 8;
        required string clr_msg = 9;
    }

    enum ClownfishCommandReplyType {
        /* Ask for confirm from client */
        CCRYT_INPUT = 0;
        /* Send partway logs */
        CCRYT_PARTWAY = 1;
        /* Command finished */
        CCRYT_FINAL = 2;
    }

    message ClownfishCommandInputReply {
        required string cciry_input = 1;
        required bool cciry_abort = 2;
    }

    message ClownfishCommandInputRequest {
        required string ccirt_prompt = 1;
    }

    message ClownfishCommandReply {
        required ClownfishCommandReplyType ccry_type = 1;
        optional ClownfishCommandFinalReply ccry_final = 2;
        optional ClownfishCommandInputRequest ccry_input_request = 3;
        repeated ClownfishLogRecord ccry_logs = 4;
    }

    required ClownfishProtocolVersion cm_protocol_version = 1;
    /* The UUID in connect request is ignored */
    required int64 cm_client_uuid = 2;
    required ClownfishMessageType cm_type = 3;
    required ClownfishErrno cm_errno = 4;
    optional ClownfishPingRequest cm_ping_request = 5;
    optional ClownfishPingReply cm_ping_reply = 6;
    optional ClownfishConnectRequest cm_connect_request = 7;
    optional ClownfishConnectReply cm_connect_reply = 8;
    optional ClownfishInteractRequest cm_interact_request = 9;
    optional ClownfishInteractReply cm_interact_reply = 10;
    optional ClownfishCommandRequest cm_command_request = 11;
    optional ClownfishCommandPartwayQuery cm_command_partway_query = 12;
    optional ClownfishCommandReply cm_command_reply = 13;
    optional ClownfishCommandInputReply cm_command_input_reply = 14;
}

